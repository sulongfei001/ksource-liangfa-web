package com.ksource.liangfa.domain;

import java.util.ArrayList;
import java.util.List;

public class JudgeConditionExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public JudgeConditionExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andConditionIdIsNull() {
            addCriterion("CONDITION_ID is null");
            return (Criteria) this;
        }

        public Criteria andConditionIdIsNotNull() {
            addCriterion("CONDITION_ID is not null");
            return (Criteria) this;
        }

        public Criteria andConditionIdEqualTo(Integer value) {
            addCriterion("CONDITION_ID =", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdNotEqualTo(Integer value) {
            addCriterion("CONDITION_ID <>", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdGreaterThan(Integer value) {
            addCriterion("CONDITION_ID >", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("CONDITION_ID >=", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdLessThan(Integer value) {
            addCriterion("CONDITION_ID <", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdLessThanOrEqualTo(Integer value) {
            addCriterion("CONDITION_ID <=", value, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdIn(List<Integer> values) {
            addCriterion("CONDITION_ID in", values, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdNotIn(List<Integer> values) {
            addCriterion("CONDITION_ID not in", values, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdBetween(Integer value1, Integer value2) {
            addCriterion("CONDITION_ID between", value1, value2, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionIdNotBetween(Integer value1, Integer value2) {
            addCriterion("CONDITION_ID not between", value1, value2, "conditionId");
            return (Criteria) this;
        }

        public Criteria andConditionNameIsNull() {
            addCriterion("CONDITION_NAME is null");
            return (Criteria) this;
        }

        public Criteria andConditionNameIsNotNull() {
            addCriterion("CONDITION_NAME is not null");
            return (Criteria) this;
        }

        public Criteria andConditionNameEqualTo(String value) {
            addCriterion("CONDITION_NAME =", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameNotEqualTo(String value) {
            addCriterion("CONDITION_NAME <>", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameGreaterThan(String value) {
            addCriterion("CONDITION_NAME >", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameGreaterThanOrEqualTo(String value) {
            addCriterion("CONDITION_NAME >=", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameLessThan(String value) {
            addCriterion("CONDITION_NAME <", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameLessThanOrEqualTo(String value) {
            addCriterion("CONDITION_NAME <=", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameLike(String value) {
            addCriterion("CONDITION_NAME like", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameNotLike(String value) {
            addCriterion("CONDITION_NAME not like", value, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameIn(List<String> values) {
            addCriterion("CONDITION_NAME in", values, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameNotIn(List<String> values) {
            addCriterion("CONDITION_NAME not in", values, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameBetween(String value1, String value2) {
            addCriterion("CONDITION_NAME between", value1, value2, "conditionName");
            return (Criteria) this;
        }

        public Criteria andConditionNameNotBetween(String value1, String value2) {
            addCriterion("CONDITION_NAME not between", value1, value2, "conditionName");
            return (Criteria) this;
        }

        public Criteria andIsParentIsNull() {
            addCriterion("IS_PARENT is null");
            return (Criteria) this;
        }

        public Criteria andIsParentIsNotNull() {
            addCriterion("IS_PARENT is not null");
            return (Criteria) this;
        }

        public Criteria andIsParentEqualTo(Integer value) {
            addCriterion("IS_PARENT =", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentNotEqualTo(Integer value) {
            addCriterion("IS_PARENT <>", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentGreaterThan(Integer value) {
            addCriterion("IS_PARENT >", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentGreaterThanOrEqualTo(Integer value) {
            addCriterion("IS_PARENT >=", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentLessThan(Integer value) {
            addCriterion("IS_PARENT <", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentLessThanOrEqualTo(Integer value) {
            addCriterion("IS_PARENT <=", value, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentIn(List<Integer> values) {
            addCriterion("IS_PARENT in", values, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentNotIn(List<Integer> values) {
            addCriterion("IS_PARENT not in", values, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentBetween(Integer value1, Integer value2) {
            addCriterion("IS_PARENT between", value1, value2, "isParent");
            return (Criteria) this;
        }

        public Criteria andIsParentNotBetween(Integer value1, Integer value2) {
            addCriterion("IS_PARENT not between", value1, value2, "isParent");
            return (Criteria) this;
        }

        public Criteria andParentIdIsNull() {
            addCriterion("PARENT_ID is null");
            return (Criteria) this;
        }

        public Criteria andParentIdIsNotNull() {
            addCriterion("PARENT_ID is not null");
            return (Criteria) this;
        }

        public Criteria andParentIdEqualTo(Integer value) {
            addCriterion("PARENT_ID =", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdNotEqualTo(Integer value) {
            addCriterion("PARENT_ID <>", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdGreaterThan(Integer value) {
            addCriterion("PARENT_ID >", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("PARENT_ID >=", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdLessThan(Integer value) {
            addCriterion("PARENT_ID <", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdLessThanOrEqualTo(Integer value) {
            addCriterion("PARENT_ID <=", value, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdIn(List<Integer> values) {
            addCriterion("PARENT_ID in", values, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdNotIn(List<Integer> values) {
            addCriterion("PARENT_ID not in", values, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdBetween(Integer value1, Integer value2) {
            addCriterion("PARENT_ID between", value1, value2, "parentId");
            return (Criteria) this;
        }

        public Criteria andParentIdNotBetween(Integer value1, Integer value2) {
            addCriterion("PARENT_ID not between", value1, value2, "parentId");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated do_not_delete_during_merge Wed May 28 09:44:09 CST 2014
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table LIANGFA_HUBEI_V2.JUDGE_CONDITION
     *
     * @mbggenerated Wed May 28 09:44:09 CST 2014
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}