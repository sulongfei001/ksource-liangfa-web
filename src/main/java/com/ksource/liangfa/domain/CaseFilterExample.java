package com.ksource.liangfa.domain;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class CaseFilterExample {
    /**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	protected String orderByClause;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	protected boolean distinct;
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public CaseFilterExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public void setDistinct(boolean distinct) {
		this.distinct = distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public boolean isDistinct() {
		return distinct;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public Criteria or() {
		Criteria criteria = createCriteriaInternal();
		oredCriteria.add(criteria);
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public void clear() {
		oredCriteria.clear();
		orderByClause = null;
		distinct = false;
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	protected abstract static class GeneratedCriteria {
		protected List<Criterion> criteria;

		protected GeneratedCriteria() {
			super();
			criteria = new ArrayList<Criterion>();
		}

		public boolean isValid() {
			return criteria.size() > 0;
		}

		public List<Criterion> getAllCriteria() {
			return criteria;
		}

		public List<Criterion> getCriteria() {
			return criteria;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteria.add(new Criterion(condition));
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value));
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			criteria.add(new Criterion(condition, value1, value2));
		}

		protected void addCriterionForJDBCDate(String condition, Date value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value.getTime()),
					property);
		}

		protected void addCriterionForJDBCDate(String condition,
				List<Date> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			List<java.sql.Date> dateList = new ArrayList<java.sql.Date>();
			Iterator<Date> iter = values.iterator();
			while (iter.hasNext()) {
				dateList.add(new java.sql.Date(iter.next().getTime()));
			}
			addCriterion(condition, dateList, property);
		}

		protected void addCriterionForJDBCDate(String condition, Date value1,
				Date value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			addCriterion(condition, new java.sql.Date(value1.getTime()),
					new java.sql.Date(value2.getTime()), property);
		}

		public Criteria andFilterIdIsNull() {
			addCriterion("FILTER_ID is null");
			return (Criteria) this;
		}

		public Criteria andFilterIdIsNotNull() {
			addCriterion("FILTER_ID is not null");
			return (Criteria) this;
		}

		public Criteria andFilterIdEqualTo(Integer value) {
			addCriterion("FILTER_ID =", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdNotEqualTo(Integer value) {
			addCriterion("FILTER_ID <>", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdGreaterThan(Integer value) {
			addCriterion("FILTER_ID >", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("FILTER_ID >=", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdLessThan(Integer value) {
			addCriterion("FILTER_ID <", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdLessThanOrEqualTo(Integer value) {
			addCriterion("FILTER_ID <=", value, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdIn(List<Integer> values) {
			addCriterion("FILTER_ID in", values, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdNotIn(List<Integer> values) {
			addCriterion("FILTER_ID not in", values, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdBetween(Integer value1, Integer value2) {
			addCriterion("FILTER_ID between", value1, value2, "filterId");
			return (Criteria) this;
		}

		public Criteria andFilterIdNotBetween(Integer value1, Integer value2) {
			addCriterion("FILTER_ID not between", value1, value2, "filterId");
			return (Criteria) this;
		}

		public Criteria andOrgCodeIsNull() {
			addCriterion("ORG_CODE is null");
			return (Criteria) this;
		}

		public Criteria andOrgCodeIsNotNull() {
			addCriterion("ORG_CODE is not null");
			return (Criteria) this;
		}

		public Criteria andOrgCodeEqualTo(Integer value) {
			addCriterion("ORG_CODE =", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeNotEqualTo(Integer value) {
			addCriterion("ORG_CODE <>", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeGreaterThan(Integer value) {
			addCriterion("ORG_CODE >", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeGreaterThanOrEqualTo(Integer value) {
			addCriterion("ORG_CODE >=", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeLessThan(Integer value) {
			addCriterion("ORG_CODE <", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeLessThanOrEqualTo(Integer value) {
			addCriterion("ORG_CODE <=", value, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeIn(List<Integer> values) {
			addCriterion("ORG_CODE in", values, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeNotIn(List<Integer> values) {
			addCriterion("ORG_CODE not in", values, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeBetween(Integer value1, Integer value2) {
			addCriterion("ORG_CODE between", value1, value2, "orgCode");
			return (Criteria) this;
		}

		public Criteria andOrgCodeNotBetween(Integer value1, Integer value2) {
			addCriterion("ORG_CODE not between", value1, value2, "orgCode");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedIsNull() {
			addCriterion("MIN_AMOUNT_INVOLVED is null");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedIsNotNull() {
			addCriterion("MIN_AMOUNT_INVOLVED is not null");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedEqualTo(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED =", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedNotEqualTo(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED <>", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedGreaterThan(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED >", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedGreaterThanOrEqualTo(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED >=", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedLessThan(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED <", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedLessThanOrEqualTo(Double value) {
			addCriterion("MIN_AMOUNT_INVOLVED <=", value, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedIn(List<Double> values) {
			addCriterion("MIN_AMOUNT_INVOLVED in", values, "minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedNotIn(List<Double> values) {
			addCriterion("MIN_AMOUNT_INVOLVED not in", values,
					"minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedBetween(Double value1, Double value2) {
			addCriterion("MIN_AMOUNT_INVOLVED between", value1, value2,
					"minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinAmountInvolvedNotBetween(Double value1,
				Double value2) {
			addCriterion("MIN_AMOUNT_INVOLVED not between", value1, value2,
					"minAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedIsNull() {
			addCriterion("MAX_AMOUNT_INVOLVED is null");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedIsNotNull() {
			addCriterion("MAX_AMOUNT_INVOLVED is not null");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedEqualTo(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED =", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedNotEqualTo(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED <>", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedGreaterThan(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED >", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedGreaterThanOrEqualTo(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED >=", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedLessThan(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED <", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedLessThanOrEqualTo(Double value) {
			addCriterion("MAX_AMOUNT_INVOLVED <=", value, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedIn(List<Double> values) {
			addCriterion("MAX_AMOUNT_INVOLVED in", values, "maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedNotIn(List<Double> values) {
			addCriterion("MAX_AMOUNT_INVOLVED not in", values,
					"maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedBetween(Double value1, Double value2) {
			addCriterion("MAX_AMOUNT_INVOLVED between", value1, value2,
					"maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMaxAmountInvolvedNotBetween(Double value1,
				Double value2) {
			addCriterion("MAX_AMOUNT_INVOLVED not between", value1, value2,
					"maxAmountInvolved");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeIsNull() {
			addCriterion("MIN_CASE_INPUT_TIME is null");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeIsNotNull() {
			addCriterion("MIN_CASE_INPUT_TIME is not null");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeEqualTo(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME =", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME <>", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeGreaterThan(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME >", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME >=", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeLessThan(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME <", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME <=", value,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeIn(List<Date> values) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME in", values,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME not in", values,
					"minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME between", value1,
					value2, "minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMinCaseInputTimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("MIN_CASE_INPUT_TIME not between", value1,
					value2, "minCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeIsNull() {
			addCriterion("MAX_CASE_INPUT_TIME is null");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeIsNotNull() {
			addCriterion("MAX_CASE_INPUT_TIME is not null");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeEqualTo(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME =", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeNotEqualTo(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME <>", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeGreaterThan(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME >", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeGreaterThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME >=", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeLessThan(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME <", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeLessThanOrEqualTo(Date value) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME <=", value,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeIn(List<Date> values) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME in", values,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeNotIn(List<Date> values) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME not in", values,
					"maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME between", value1,
					value2, "maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andMaxCaseInputTimeNotBetween(Date value1, Date value2) {
			addCriterionForJDBCDate("MAX_CASE_INPUT_TIME not between", value1,
					value2, "maxCaseInputTime");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseIsNull() {
			addCriterion("IS_SERIOUS_CASE is null");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseIsNotNull() {
			addCriterion("IS_SERIOUS_CASE is not null");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseEqualTo(Integer value) {
			addCriterion("IS_SERIOUS_CASE =", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseNotEqualTo(Integer value) {
			addCriterion("IS_SERIOUS_CASE <>", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseGreaterThan(Integer value) {
			addCriterion("IS_SERIOUS_CASE >", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseGreaterThanOrEqualTo(Integer value) {
			addCriterion("IS_SERIOUS_CASE >=", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseLessThan(Integer value) {
			addCriterion("IS_SERIOUS_CASE <", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseLessThanOrEqualTo(Integer value) {
			addCriterion("IS_SERIOUS_CASE <=", value, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseIn(List<Integer> values) {
			addCriterion("IS_SERIOUS_CASE in", values, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseNotIn(List<Integer> values) {
			addCriterion("IS_SERIOUS_CASE not in", values, "isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseBetween(Integer value1, Integer value2) {
			addCriterion("IS_SERIOUS_CASE between", value1, value2,
					"isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsSeriousCaseNotBetween(Integer value1,
				Integer value2) {
			addCriterion("IS_SERIOUS_CASE not between", value1, value2,
					"isSeriousCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseIsNull() {
			addCriterion("IS_DISCUSS_CASE is null");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseIsNotNull() {
			addCriterion("IS_DISCUSS_CASE is not null");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseEqualTo(Integer value) {
			addCriterion("IS_DISCUSS_CASE =", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseNotEqualTo(Integer value) {
			addCriterion("IS_DISCUSS_CASE <>", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseGreaterThan(Integer value) {
			addCriterion("IS_DISCUSS_CASE >", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseGreaterThanOrEqualTo(Integer value) {
			addCriterion("IS_DISCUSS_CASE >=", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseLessThan(Integer value) {
			addCriterion("IS_DISCUSS_CASE <", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseLessThanOrEqualTo(Integer value) {
			addCriterion("IS_DISCUSS_CASE <=", value, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseIn(List<Integer> values) {
			addCriterion("IS_DISCUSS_CASE in", values, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseNotIn(List<Integer> values) {
			addCriterion("IS_DISCUSS_CASE not in", values, "isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseBetween(Integer value1, Integer value2) {
			addCriterion("IS_DISCUSS_CASE between", value1, value2,
					"isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andIsDiscussCaseNotBetween(Integer value1,
				Integer value2) {
			addCriterion("IS_DISCUSS_CASE not between", value1, value2,
					"isDiscussCase");
			return (Criteria) this;
		}

		public Criteria andChufaTimesIsNull() {
			addCriterion("CHUFA_TIMES is null");
			return (Criteria) this;
		}

		public Criteria andChufaTimesIsNotNull() {
			addCriterion("CHUFA_TIMES is not null");
			return (Criteria) this;
		}

		public Criteria andChufaTimesEqualTo(Integer value) {
			addCriterion("CHUFA_TIMES =", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesNotEqualTo(Integer value) {
			addCriterion("CHUFA_TIMES <>", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesGreaterThan(Integer value) {
			addCriterion("CHUFA_TIMES >", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesGreaterThanOrEqualTo(Integer value) {
			addCriterion("CHUFA_TIMES >=", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesLessThan(Integer value) {
			addCriterion("CHUFA_TIMES <", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesLessThanOrEqualTo(Integer value) {
			addCriterion("CHUFA_TIMES <=", value, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesIn(List<Integer> values) {
			addCriterion("CHUFA_TIMES in", values, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesNotIn(List<Integer> values) {
			addCriterion("CHUFA_TIMES not in", values, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesBetween(Integer value1, Integer value2) {
			addCriterion("CHUFA_TIMES between", value1, value2, "chufaTimes");
			return (Criteria) this;
		}

		public Criteria andChufaTimesNotBetween(Integer value1, Integer value2) {
			addCriterion("CHUFA_TIMES not between", value1, value2,
					"chufaTimes");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyIsNull() {
			addCriterion("IS_BEYOND_EIGHTY is null");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyIsNotNull() {
			addCriterion("IS_BEYOND_EIGHTY is not null");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyEqualTo(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY =", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyNotEqualTo(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY <>", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyGreaterThan(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY >", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyGreaterThanOrEqualTo(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY >=", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyLessThan(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY <", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyLessThanOrEqualTo(Integer value) {
			addCriterion("IS_BEYOND_EIGHTY <=", value, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyIn(List<Integer> values) {
			addCriterion("IS_BEYOND_EIGHTY in", values, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyNotIn(List<Integer> values) {
			addCriterion("IS_BEYOND_EIGHTY not in", values, "isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyBetween(Integer value1, Integer value2) {
			addCriterion("IS_BEYOND_EIGHTY between", value1, value2,
					"isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsBeyondEightyNotBetween(Integer value1,
				Integer value2) {
			addCriterion("IS_BEYOND_EIGHTY not between", value1, value2,
					"isBeyondEighty");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyIsNull() {
			addCriterion("IS_LOWER_LIMIT_MONEY is null");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyIsNotNull() {
			addCriterion("IS_LOWER_LIMIT_MONEY is not null");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyEqualTo(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY =", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyNotEqualTo(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY <>", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyGreaterThan(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY >", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyGreaterThanOrEqualTo(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY >=", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyLessThan(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY <", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyLessThanOrEqualTo(Integer value) {
			addCriterion("IS_LOWER_LIMIT_MONEY <=", value, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyIn(List<Integer> values) {
			addCriterion("IS_LOWER_LIMIT_MONEY in", values, "isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyNotIn(List<Integer> values) {
			addCriterion("IS_LOWER_LIMIT_MONEY not in", values,
					"isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyBetween(Integer value1,
				Integer value2) {
			addCriterion("IS_LOWER_LIMIT_MONEY between", value1, value2,
					"isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsLowerLimitMoneyNotBetween(Integer value1,
				Integer value2) {
			addCriterion("IS_LOWER_LIMIT_MONEY not between", value1, value2,
					"isLowerLimitMoney");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyIsNull() {
			addCriterion("IS_IDENTIFY is null");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyIsNotNull() {
			addCriterion("IS_IDENTIFY is not null");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyEqualTo(Integer value) {
			addCriterion("IS_IDENTIFY =", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyNotEqualTo(Integer value) {
			addCriterion("IS_IDENTIFY <>", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyGreaterThan(Integer value) {
			addCriterion("IS_IDENTIFY >", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyGreaterThanOrEqualTo(Integer value) {
			addCriterion("IS_IDENTIFY >=", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyLessThan(Integer value) {
			addCriterion("IS_IDENTIFY <", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyLessThanOrEqualTo(Integer value) {
			addCriterion("IS_IDENTIFY <=", value, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyIn(List<Integer> values) {
			addCriterion("IS_IDENTIFY in", values, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyNotIn(List<Integer> values) {
			addCriterion("IS_IDENTIFY not in", values, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyBetween(Integer value1, Integer value2) {
			addCriterion("IS_IDENTIFY between", value1, value2, "isIdentify");
			return (Criteria) this;
		}

		public Criteria andIsIdentifyNotBetween(Integer value1, Integer value2) {
			addCriterion("IS_IDENTIFY not between", value1, value2,
					"isIdentify");
			return (Criteria) this;
		}
	}

	/**
	 * This class was generated by MyBatis Generator. This class corresponds to the database table LIANGFA_HUBEI_V2_XIAN.CASE_FILTER
	 * @mbggenerated  Tue Mar 15 11:40:12 CST 2016
	 */
	public static class Criterion {
		private String condition;
		private Object value;
		private Object secondValue;
		private boolean noValue;
		private boolean singleValue;
		private boolean betweenValue;
		private boolean listValue;
		private String typeHandler;

		public String getCondition() {
			return condition;
		}

		public Object getValue() {
			return value;
		}

		public Object getSecondValue() {
			return secondValue;
		}

		public boolean isNoValue() {
			return noValue;
		}

		public boolean isSingleValue() {
			return singleValue;
		}

		public boolean isBetweenValue() {
			return betweenValue;
		}

		public boolean isListValue() {
			return listValue;
		}

		public String getTypeHandler() {
			return typeHandler;
		}

		protected Criterion(String condition) {
			super();
			this.condition = condition;
			this.typeHandler = null;
			this.noValue = true;
		}

		protected Criterion(String condition, Object value, String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.typeHandler = typeHandler;
			if (value instanceof List<?>) {
				this.listValue = true;
			} else {
				this.singleValue = true;
			}
		}

		protected Criterion(String condition, Object value) {
			this(condition, value, null);
		}

		protected Criterion(String condition, Object value, Object secondValue,
				String typeHandler) {
			super();
			this.condition = condition;
			this.value = value;
			this.secondValue = secondValue;
			this.typeHandler = typeHandler;
			this.betweenValue = true;
		}

		protected Criterion(String condition, Object value, Object secondValue) {
			this(condition, value, secondValue, null);
		}
	}

	/**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table CASE_FILTER
     *
     * @mbggenerated do_not_delete_during_merge Mon May 26 10:52:39 CST 2014
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }
}