package com.ksource.liangfa.mapper;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import com.ksource.liangfa.domain.CaseBasic;
import com.ksource.liangfa.domain.CaseBasicExample;
import com.ksource.liangfa.domain.CaseCompany;
import com.ksource.liangfa.domain.CaseForLucene;
import com.ksource.liangfa.domain.CaseParty;
import com.ksource.liangfa.domain.CaseTodo;
import com.ksource.liangfa.domain.CrimeCaseExt;

public interface CaseBasicMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int countByExample(CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int deleteByExample(CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int deleteByPrimaryKey(String caseId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int insert(CaseBasic record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int insertSelective(CaseBasic record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	List<CaseBasic> selectByExampleWithBLOBs(CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	List<CaseBasic> selectByExample(CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	CaseBasic selectByPrimaryKey(String caseId);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByExampleSelective(@Param("record") CaseBasic record,
			@Param("example") CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByExampleWithBLOBs(@Param("record") CaseBasic record,
			@Param("example") CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByExample(@Param("record") CaseBasic record,
			@Param("example") CaseBasicExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByPrimaryKeySelective(CaseBasic record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByPrimaryKeyWithBLOBs(CaseBasic record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table LIANGFA_XINXIANG20170222.CASE_BASIC
	 * @mbggenerated  Tue Apr 11 11:18:42 CST 2017
	 */
	int updateByPrimaryKey(CaseBasic record);

	String getCaseSequenceId();

    CaseBasic queryProcBusinessEntity(Map<String, Object> map);

    List<CaseParty> getCasePartyByCaseId(String caseId);

    Map<String, String> getCaseStatsCount(Map<String, Object> map);

    Map<String, String> getCaseStatsPartyCount(Map<String, Object> map);

    int getDaibuCaseCount(Map<String, Object> map);

    CaseBasic findByPk(String caseId);

    int countBycaseNo(Map<String, Object> map);

    CaseBasic findByCaseNoandOrg(Map<String, Object> map);

    List<CaseBasic> findByLikeCaseNo(Map<String, Object> map);

    int getStateCount(Map<String, Object> map);

    List<CaseBasic> getStateList(Map<String, Object> map);

    int getAccuseCount(Map<String, Object> map);

    List<CaseBasic> getAccuseList(Map<String, Object> map);

    List<CaseCompany> getCaseCompanyByCaseId(String caseId);

    List<CaseBasic> queryHistoryCaseBySameOrgAndCaseParty(@Param("caseId")String caseId,@Param("idsNo")String idsNo);
    List<CaseBasic> queryHistoryCaseBySameOrgAndCaseCompany(@Param("caseId")String caseId,@Param("regNo")String regNo);
    //流程的查询与删除
    List<CaseBasic> searchCaseAndWorkflow(Map<String, Object> map);
    int searchCaseAndWorkflowCount(Map<String, Object> map);
    int deleteCaseAndWorkflow(String procInstId);
    //查询案件基本信息和案件流程信�??
    CaseBasic selectByPK(String businessKey);
    List<CaseBasic> getCases(Map<String, Object> map);

    /**
     *
     * @param caseId
     * @return 该案件对应的行政区划代码
     */
    String getDistrictCode(String caseId) ;

    List<CaseBasic> selectJieanNoticeCase(String userId);

    public List<CaseBasic> caseSupervisionNotice(String userId);

    /**
     * 查找涉嫌犯罪案件信息
     * @param caseId
     * @return
     * @author XT
     */
    public CrimeCaseExt findCrimeExtAndBscByPk(String caseId);

    List<CaseBasic> caseRecordNotice(String userId,String page);

	List<CaseBasic> findByProcDefKey(String procDefKey);

	List<CaseBasic> queryNoExportDataList(Map<String, Object> paramMap);

	List<CaseBasic> findAllCaseList();
	

	List<CaseBasic> getyisiFaCaseList(Map<String, Object> params);
	/**
	 *根据条件对案件进行比对分�??
	 * @param params
	 * 1.同一违法行为发生�??- <address,"Y">
	 * 2.同一违法行为发生时间 - <shijian,"Y">
	 * 3.同一涉案物品 - <wupin,"Y">
	 * 4.同一鉴定   - <jianding,"Y">
	 * 5.同一处罚对象（单位） - <danwei,"Y">
	 * 6.同一处罚对象（个人）- <dangshiren,"Y">
	 * @return
	 */
	List<CaseBasic> getyisiFaCaseListForLucene(Map<String, Object> params);

	List<CaseForLucene> findAllCaseForLuceneList();

	void updateInentify(CaseBasic caseBasic);
	
	CaseBasic getCaseByTaskId(Map<String, Object> params);

	List<CaseBasic> querySuspectedCriminalCase(CaseBasic caseBasic);

	List<CaseBasic> queryfilingSupervisionCase(Map<String, Object> paramMap);
	
	Date queryMinCaseInputTime(CaseBasic caseBasic);

	int queryCaseCount(CaseBasic caseBasic);

	Integer getyisiFaCaseCount(Map<String, Object> paramMap);

	Integer queryfilingSupervisionCaseCount(Map<String, Object> paramMap);

	/**
	 * 某行业行政处罚录入统计按区划
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryCaseInputInfoForIndustry(
			Map<String, Object> paramMap);

	/**
	 * 获得某行业涉嫌犯罪案件处理情况按区划统计
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryCrimeCaseInfoForIndustry(
			Map<String, Object> paramMap);

	/**
	 * 获取业务系统涉嫌犯罪案件处理情况总体情况
	 * author XT
	 * @param paramMap
	 * @return
	 */
	Map<String, Object> queryAllCrimeCaseDealStatis(Map<String, Object> paramMap);

	/**
	 * 行政处罚案件录入按区划进行统�?
	 * author XT
	 * @param paramMap TODO
	 * @return
	 */
	List<Map<String, Object>> queryXzcfInputRatioPerRegion(Map paramMap);

	/**
	 * 行政处罚录入统计按行�?
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryXzcfInputRatioPerIndustry(
			Map<String, Object> paramMap);

	/**
	 * 获得涉嫌犯罪案件处理情况按区划统�?
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryCrimeCaseDealStatis(
			Map<String, Object> paramMap);

	/**
	 * 获得涉嫌犯罪案件处理情况按行业统�? 
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryCrimeCaseDealStatisByIndustry(
			Map<String, Object> paramMap);

	/**
	 * 统计前十名罪名个�? 
	 * author XT
	 * @param paramMap
	 * @return
	 */
	List<Map<String, Object>> queryTop10Accuse(Map<String, Object> paramMap);

	/**
	 * 综合分析获取行政处罚案件总数
	 * @author chenzengjie
	 * @param paramMap
	 */
	int queryCaseCountForZHFX(Map<String, Object> paramMap);

	/**
	 * 综合分析获取行疑似涉嫌犯罪案�?
	 * @author chenzengjie
	 * @param paramMap
	 * @return
	 */
	int queryCrimeCaseCountForZHFX(Map<String, Object> paramMap);

	/**
	 * 降格处理案件数量
	 * @author chenzengjie
	 * @param paramMap
	 * @return
	 */
	Map<String, Object> queryJGCLCaseCountForZHFX(Map<String, Object> paramMap);

	/**
	 * 大数据分析筛查案件数�?
	 * @author chenzengjie
	 * @param paramMap
	 * @param filterMap
	 * @return
	 */
	Integer queryDSJFXCaseCountForZHFX(Map<String, Object> paramMap);
	
	/**
	 * 查询移�?�案件数�?
	 * @param caseBasic
	 * @return
	 */
	Integer queryYisongCaseCount(CaseBasic caseBasic);

	/**
	 * 查询移�?�公安尚未处理案件数�?
	 * @param caseBasic
	 * @return
	 */
	Integer queryPoliceNotAcceptCaseCount(CaseBasic caseBasic);
	
	/**
	 * 查询移�?�公安尚未处理案件信�?
	 * @param caseBasic
	 * @return
	 */
	List<CaseBasic> queryPoliceNotAcceptCaseList(CaseBasic caseBasic);

	int queryYisongCount(Map<String, Object> paramMap);
	
	/**
	 * 查询所有案件
	 * @param caseBasic
	 * @return
	 */
	List<CaseBasic> getAllCaseList(CaseBasic caseBasic);
	
	int getAllCaseCount(Map<String, Object> paramMap);
	
	/**
     * 查询待办案件
     * @param caseTodo
     * @return
     */
	CaseBasic getAudit(String caseId);
	
	/**
	 * 根据id更新案件状�??
	 * @param paramMap
	 */
	void updateCaseStateByCaseId(Map<String,String> paramMap);

	Map<String, Integer> queryWarningData(Map<String,Object> param);

	CaseBasic selectByCaseId(String caseId);
	
	/**
	 * 我的移送管辖列表
	 * @param paramMap
	 * @return
	 */
	List<CaseBasic> getCaseTurnoverList(Map<String,Object> paramMap);
    int getCaseTurnoverCount(Map<String,Object> paramMap);
    /**
     * 我的分派列表
     * @param paramMap
     * @return
     */
    List<CaseBasic> getCaseFenpaiList(Map<String,Object> paramMap);
    int getCaseFenpaiCount(Map<String,Object> paramMap);
    /**
     * 获取案件详情展示，分派步骤需要展示的信息
     * @param caseId
     * @return
     */
    CaseBasic getFenpaiInfo(String caseId);
    /**
     * 获取案件详情展示，移送管辖步骤需要展示的信息
     * @param caseId
     * @return
     */
    CaseBasic getYiSongGuanXiaInfo(String caseId);
    
    int getTimeOutCount(Map<String,Object> paramMap);

    int getAmountWarnCount(Map<String, Object> paramMap);

    int getDelayWarnCount(Map<String, Object> paramMap);
    
    /**
     * 查询案件受理详情
     * @param paramMap
     * @return
     */
    CaseBasic getAdministratorAcceptCase(Map<String, Object> paramMap);
    
	/**
	 * 对旧的案件进行涉嫌犯罪分析
	 * 
	 * @author: LXL
	 * @return:List<CaseBasic>
	 * @createTime:2017年10月16日 下午3:58:21
	 */
	List<CaseBasic> analyCaseBasicList(Map<String, Object> paramMap);

	int updateClueId(Integer clueId);
	
	/**
     * 查询行业下的案件数量
     * */
    List<CaseBasic> getCaseByIndustryType(Map<String, Object> param);

}