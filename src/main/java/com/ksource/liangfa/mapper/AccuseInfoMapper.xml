<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ksource.liangfa.mapper.AccuseInfoMapper">
  <resultMap id="BaseResultMap" type="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    <id column="ID" jdbcType="DECIMAL" property="id" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="CLAUSE" jdbcType="VARCHAR" property="clause" />
    <result column="INFO_ORDER" jdbcType="DECIMAL" property="infoOrder" />
    <result column="ACCUSE_ID1" jdbcType="DECIMAL" property="accuseId1" />
    <result column="ACCUSE_ID2" jdbcType="DECIMAL" property="accuseId2" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    <result column="LAW" jdbcType="CLOB" property="law" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  AND ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  AND ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  AND ${criterion.condition} #{criterion.value} AND #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  AND ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  AND ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  AND ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  AND ${criterion.condition} #{criterion.value} AND #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  AND ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    ID, NAME, CLAUSE, INFO_ORDER, ACCUSE_ID1, ACCUSE_ID2
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    LAW
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.ksource.liangfa.domain.AccuseInfoExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    SELECT
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM ACCUSE_INFO
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      ORDER BY ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.ksource.liangfa.domain.AccuseInfoExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    SELECT
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    FROM ACCUSE_INFO
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      ORDER BY ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    SELECT 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM ACCUSE_INFO
    WHERE ID = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    DELETE FROM ACCUSE_INFO
    WHERE ID = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.ksource.liangfa.domain.AccuseInfoExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    DELETE FROM ACCUSE_INFO
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    INSERT INTO ACCUSE_INFO (ID, NAME, CLAUSE, 
      INFO_ORDER, ACCUSE_ID1, ACCUSE_ID2, 
      LAW)
    VALUES (#{id,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR}, #{clause,jdbcType=VARCHAR}, 
      #{infoOrder,jdbcType=DECIMAL}, #{accuseId1,jdbcType=DECIMAL}, #{accuseId2,jdbcType=DECIMAL}, 
      #{law,jdbcType=CLOB})
  </insert>
  <insert id="insertSelective" parameterType="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    INSERT INTO ACCUSE_INFO
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="name != null">
        NAME,
      </if>
      <if test="clause != null">
        CLAUSE,
      </if>
      <if test="infoOrder != null">
        INFO_ORDER,
      </if>
      <if test="accuseId1 != null">
        ACCUSE_ID1,
      </if>
      <if test="accuseId2 != null">
        ACCUSE_ID2,
      </if>
      <if test="law != null">
        LAW,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="clause != null">
        #{clause,jdbcType=VARCHAR},
      </if>
      <if test="infoOrder != null">
        #{infoOrder,jdbcType=DECIMAL},
      </if>
      <if test="accuseId1 != null">
        #{accuseId1,jdbcType=DECIMAL},
      </if>
      <if test="accuseId2 != null">
        #{accuseId2,jdbcType=DECIMAL},
      </if>
      <if test="law != null">
        #{law,jdbcType=CLOB},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ksource.liangfa.domain.AccuseInfoExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    SELECT count(*) from ACCUSE_INFO
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.name != null">
        NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.clause != null">
        CLAUSE = #{record.clause,jdbcType=VARCHAR},
      </if>
      <if test="record.infoOrder != null">
        INFO_ORDER = #{record.infoOrder,jdbcType=DECIMAL},
      </if>
      <if test="record.accuseId1 != null">
        ACCUSE_ID1 = #{record.accuseId1,jdbcType=DECIMAL},
      </if>
      <if test="record.accuseId2 != null">
        ACCUSE_ID2 = #{record.accuseId2,jdbcType=DECIMAL},
      </if>
      <if test="record.law != null">
        LAW = #{record.law,jdbcType=CLOB},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    SET ID = #{record.id,jdbcType=DECIMAL},
      NAME = #{record.name,jdbcType=VARCHAR},
      CLAUSE = #{record.clause,jdbcType=VARCHAR},
      INFO_ORDER = #{record.infoOrder,jdbcType=DECIMAL},
      ACCUSE_ID1 = #{record.accuseId1,jdbcType=DECIMAL},
      ACCUSE_ID2 = #{record.accuseId2,jdbcType=DECIMAL},
      LAW = #{record.law,jdbcType=CLOB}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    SET ID = #{record.id,jdbcType=DECIMAL},
      NAME = #{record.name,jdbcType=VARCHAR},
      CLAUSE = #{record.clause,jdbcType=VARCHAR},
      INFO_ORDER = #{record.infoOrder,jdbcType=DECIMAL},
      ACCUSE_ID1 = #{record.accuseId1,jdbcType=DECIMAL},
      ACCUSE_ID2 = #{record.accuseId2,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    <set>
      <if test="name != null">
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="clause != null">
        CLAUSE = #{clause,jdbcType=VARCHAR},
      </if>
      <if test="infoOrder != null">
        INFO_ORDER = #{infoOrder,jdbcType=DECIMAL},
      </if>
      <if test="accuseId1 != null">
        ACCUSE_ID1 = #{accuseId1,jdbcType=DECIMAL},
      </if>
      <if test="accuseId2 != null">
        ACCUSE_ID2 = #{accuseId2,jdbcType=DECIMAL},
      </if>
      <if test="law != null">
        LAW = #{law,jdbcType=CLOB},
      </if>
    </set>
    WHERE ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    SET NAME = #{name,jdbcType=VARCHAR},
      CLAUSE = #{clause,jdbcType=VARCHAR},
      INFO_ORDER = #{infoOrder,jdbcType=DECIMAL},
      ACCUSE_ID1 = #{accuseId1,jdbcType=DECIMAL},
      ACCUSE_ID2 = #{accuseId2,jdbcType=DECIMAL},
      LAW = #{law,jdbcType=CLOB}
    WHERE ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ksource.liangfa.domain.AccuseInfo">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Mar 28 16:26:21 CST 2017.
    -->
    UPDATE ACCUSE_INFO
    SET NAME = #{name,jdbcType=VARCHAR},
      CLAUSE = #{clause,jdbcType=VARCHAR},
      INFO_ORDER = #{infoOrder,jdbcType=DECIMAL},
      ACCUSE_ID1 = #{accuseId1,jdbcType=DECIMAL},
      ACCUSE_ID2 = #{accuseId2,jdbcType=DECIMAL}
    WHERE ID = #{id,jdbcType=DECIMAL}
  </update>
  
  <select id="select" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT count(*)
    FROM ACCUSE_INFO WHERE
    <if test="level ==1">
     ACCUSE_ID1 = #{id,jdbcType=DECIMAL}
   	</if>
  	<if test="level==2">
        ACCUSE_ID2 = #{id,jdbcType=DECIMAL}
   	</if>
  </select>
  
 	<select id="getPaginationList" parameterType="java.util.Map" resultMap="BaseResultMap">
		 SELECT 
	   <include refid="Base_Column_List" />,<include refid="Blob_Column_List" />
	   FROM ACCUSE_INFO
	   <where>
	   <if test="level ==1">
	    AND ACCUSE_ID1 = #{id,jdbcType=DECIMAL} AND ACCUSE_ID2 IS NULL
	  	</if>
	 	<if test="level==2">
	      AND ACCUSE_ID2 = #{id,jdbcType=DECIMAL}
	  	</if>
	  	<if test="name!=null">
	  		AND NAME LIKE
	  		CONCAT(CONCAT('%',#{name}),'%')
	  	</if>
	  	<if test="clause!=null">
	  		AND CLAUSE LIKE
	  		CONCAT(CONCAT('%',#{clause}),'%')
	  	</if>
	  	</where>
	  	ORDER BY INFO_ORDER
	</select>
	
	<select id="getPaginationCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT COUNT(*)	    
	    FROM ACCUSE_INFO
	    <where>
	    <if test="level ==1">
	      AND ACCUSE_ID1 = #{id,jdbcType=DECIMAL} AND ACCUSE_ID2 IS NULL
	   	</if>
	  	<if test="level==2">
	      AND  ACCUSE_ID2 = #{id,jdbcType=DECIMAL}
	   	</if>
	   	<if test="name!=null">
	  		AND NAME LIKE
	  		CONCAT(CONCAT('%',#{name}),'%')
	  	</if>
	  	<if test="clause!=null">
	  		AND CLAUSE LIKE
	  		CONCAT(CONCAT('%',#{clause}),'%')
	  	</if>
	  	</where>
	</select>
  <select id="selectXianyirenZm" parameterType="map" resultMap="BaseResultMap">
  	SELECT * from ACCUSE_INFO T
	WHERE exists(
	      select * from xianyiren_accuse x
	      WHERE x.XIANYIREN_ID=#{xianyirenId}
	      and x.ZM_TYPE=#{zmType}
	      and x.ACCUSE_ID=T.ID
	)
  </select>
  <select id="selectCaseZm" parameterType="map" resultMap="BaseResultMap">
  	SELECT * FROM ACCUSE_INFO T
	WHERE exists(
	      SELECT * FROM CASE_ACCUSE x
	      WHERE x.CASE_ID=#{caseId}
	      AND x.ZM_TYPE=#{caseZmType}
	      AND x.ACCUSE_ID=T.ID
	)
  </select>
  
  <select id="getAccuseList" parameterType="java.util.Map" resultMap="BaseResultMap">
		<choose>
			<when test="zmType!=null and zmType=='yisong'">
				SELECT ca.ACCUSE_ID as id,a.NAME,a.CLAUSE    
				FROM CASE_ACCUSE ca,ACCUSE_INFO a,CASE_BASIC cb,V_USER_ORGANISE_DISTRICT u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				AND ca.ZM_TYPE=1
				<if test="districtId!=null and districtId!='' ">
					AND U.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND cb.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND cb.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
				ORDER BY id
			</when>
			<when test="zmType!=null and zmType=='lian'">
				SELECT a.ACCUSE_ID as id,a.NAME,a.CLAUSE
				FROM 
				(select ca.ACCUSE_ID,a.NAME,a.CLAUSE ,cb.CASE_ID,cb.INPUT_TIME,u.DISTRICT_CODE   
				FROM CASE_ACCUSE ca,ACCUSE_INFO a,CASE_BASIC cb,CASE_STATE cs,V_USER_ORGANISE_DISTRICT u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.CASE_ID=cs.CASE_ID AND cb.INPUTER=u.USER_ID
				AND cs.LIAN_STATE&gt;=3
				union all
				SELECT ca.ACCUSE_ID,a.NAME,a.CLAUSE ,cb.CASE_ID ,cb.INPUT_TIME,u.DISTRICT_CODE   
				FROM xianyiren_accuse ca,accuse_info a,case_basic cb,v_user_organise_district u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				AND ca.ZM_TYPE&gt;=1) a
				WHERE 1=1
				<if test="districtId!=null and districtId!='' ">
					AND a.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND a.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND a.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
				ORDER BY id
			</when>
			<otherwise>
				SELECT ca.ACCUSE_ID AS id,a.NAME,a.CLAUSE   
				FROM XIANYIREN_ACCUSE ca,ACCUSE_INFO a,CASE_BASIC cb,V_USER_ORGANISE_DISTRICT u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				<if test="zmType!=null and zmType=='pibu'">
					AND ca.ZM_TYPE=2
				</if>
				<if test="zmType!=null and zmType=='qisu'">
					AND ca.ZM_TYPE=4
				</if>
				<if test="zmType!=null and zmType=='panjue'">
					AND ca.ZM_TYPE&gt;=5
				</if>
				<if test="districtId!=null and districtId!='' ">
					AND u.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND cb.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND cb.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
				ORDER BY id
			</otherwise>
		</choose>
  </select>
  <select id="getAccuseCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		<choose>
			<when test="zmType!=null and zmType=='yisong'">
				SELECT count(1)     
				FROM case_accuse ca,accuse_info a,case_basic cb,v_user_organise_district u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				AND ca.ZM_TYPE=1
				<if test="districtId!=null and districtId!='' ">
					AND U.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND cb.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND cb.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
			</when>
			<when test="zmType!=null and zmType=='lian'">
				SELECT count(1) 
				FROM 
				(SELECT ca.ACCUSE_ID,a.NAME,a.CLAUSE ,cb.CASE_ID,cb.INPUT_TIME,u.DISTRICT_CODE   
				FROM case_accuse ca,accuse_info a,case_basic cb,case_state cs,v_user_organise_district u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.CASE_ID=cs.CASE_ID AND cb.INPUTER=u.USER_ID
				AND cs.LIAN_STATE&gt;=3
				union  all
				SELECT ca.ACCUSE_ID,a.NAME,a.CLAUSE ,cb.CASE_ID ,cb.INPUT_TIME,u.DISTRICT_CODE   
				FROM XIANYIREN_ACCUSE ca,ACCUSE_INFO a,CASE_BASIC cb,V_USER_ORGANISE_DISTRICT u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				AND ca.ZM_TYPE&gt;=1) a
				WHERE 1=1
				<if test="districtId!=null and districtId!='' ">
					AND a.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND a.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND a.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
			</when>
			<otherwise>
				SELECT count(1)    
				FROM xianyiren_accuse ca,accuse_info a,case_basic cb,v_user_organise_district u 
				WHERE ca.CASE_ID=cb.CASE_ID AND ca.ACCUSE_ID=a.ID AND cb.PROC_KEY ='chufaProc'
				AND cb.INPUTER=u.USER_ID
				<if test="zmType!=null and zmType=='pibu'">
					AND ca.ZM_TYPE=2
				</if>
				<if test="zmType!=null and zmType=='qisu'">
					AND ca.ZM_TYPE=4
				</if>
				<if test="zmType!=null and zmType=='panjue'">
					AND ca.ZM_TYPE&gt;=5
				</if>
				<if test="districtId!=null and districtId!='' ">
					AND u.DISTRICT_CODE IN 
					<foreach close=")" collection="districtIdLists" item="districtList" open="(" separator=",">
						#{districtList}
					</foreach>
				</if>
				<if test="startTime!=null">
					<![CDATA[ AND cb.INPUT_TIME>=#{startTime,jdbcType=TIMESTAMP} ]]>
				</if>
				<if test="endTime != null">
				 	<![CDATA[  AND cb.INPUT_TIME < #{endTime,jdbcType=TIMESTAMP} ]]>
				</if>
			</otherwise>
		</choose>
  </select>	
 
 	<select id="queryAccuseWithIllegalList" parameterType="java.util.Map" resultMap="ResultMapWithBLOBs">
		 SELECT 
	   <include refid="Base_Column_List" />,<include refid="Blob_Column_List" />
	   FROM ACCUSE_INFO a
	   <where>
	   	<if test="accuseId1!=null">
	  		AND ACCUSE_ID1 =#{accuseId1} AND ACCUSE_ID2 is null
	  	</if>
	  	<if test="accuseId2!=null">
	  		AND ACCUSE_ID2 =#{accuseId2}
	  	</if>
	  	<if test="name!=null">
	  		AND name LIKE
	  		concat(concat('%',#{name}),'%')
	  	</if>
	  	</where>
	  	ORDER BY INFO_ORDER
	</select>
	
	<select id="queryAccuseWithIllegalCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		 SELECT count(*)	    
	    FROM ACCUSE_INFO a
	    <where>
	    <if test="accuseId1 !=null and accuseId1 !='' ">
	  		AND ACCUSE_ID1 =#{accuseId1} AND ACCUSE_ID2 is null
	  	</if>
	  	<if test="accuseId2 !=null and accuseId2 !='' ">
	  		AND ACCUSE_ID2 =#{accuseId2}
	  	</if>
	   	<if test="name !=null and  name != '' ">
	  		AND NAME LIKE
	  		concat(concat('%',#{name}),'%')
	  	</if>
	  	</where>
	</select>
	
	<select id="queryAccuseByIds" resultMap="BaseResultMap">
		SELECT * FROM ACCUSE_INFO
		<where>
			<if test="accuseIdAry !=null and accuseIdAry !='' ">
				 ID IN 
				<foreach close=")" collection="accuseIdAry" item="id" open="(" separator=",">
					#{id}
				</foreach>
			</if>
		</where>
	</select>
	
	<select id="getAccuseByCaseId" parameterType="java.util.Map" resultMap="BaseResultMap">
		SELECT DISTINCT SA.ACCUSE_ID AS ID, LA.NAME
        FROM CASE_ACCUSE_RULE_RELATION CI,
             ACCUSE_RULE      I,
             ACCUSE_RULE_RELATION SA,
             ACCUSE_INFO            LA
       WHERE CI.RULE_ID = I.ID
           AND CI.RULE_ID = SA.RULE_ID
           AND SA.ACCUSE_ID = LA.ID
           AND SA.ACCUSE_ID != 190
           AND CI.CASE_ID=#{caseId}
	</select>
	
	<resultMap id="selectByByCaseInputUnitResultMap" type="com.ksource.liangfa.domain.AccuseInfo">
 		<id column="ID" jdbcType="DECIMAL" property="id" />		
		<result column="INDUSTRY_TYPE" property="law" jdbcType="VARCHAR"  />
		<result column="LAW"  property="law" jdbcType="CLOB"  />
	</resultMap>
	<select id="selectByByCaseInputUnit" parameterType="java.lang.String" resultMap="selectByByCaseInputUnitResultMap">
		SELECT I.ID,O.INDUSTRY_TYPE,I.LAW FROM (
		SELECT DISTINCT S.INDUSTRY_TYPE,SA.ACCUSE_ID FROM ILLEGAL_SITUATION S,ILLEGAL_SITUATION_ACCUSE SA
		WHERE S.ID = SA.ILLEGAL_SITUATION_ID
		AND SA.ACCUSE_ID != 190
		) T,CASE_BASIC B,ORGANISE O,ACCUSE_INFO I
		WHERE T.ACCUSE_ID = I.ID
		AND B.INPUT_UNIT = O.ORG_CODE
		AND O.INDUSTRY_TYPE = T.INDUSTRY_TYPE
		AND B.CASE_ID = #{caseId}
	</select>
	<select id="getAccuseInfoByCaseId" parameterType="java.lang.String" resultMap="BaseResultMap">
		SELECT AI.* FROM ACCUSE_INFO AI JOIN CASE_ACCUSE CA ON AI.ID=CA.ACCUSE_ID WHERE CA.CASE_ID= #{caseId}
	</select>
</mapper>